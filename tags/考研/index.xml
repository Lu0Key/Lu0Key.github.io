<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>考研 on 洛七的摸鱼池塘</title>
    <link>https://Lu0key.github.io/tags/%E8%80%83%E7%A0%94/</link>
    <description>Recent content in 考研 on 洛七的摸鱼池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 May 2021 18:59:39 +0800</lastBuildDate><atom:link href="https://Lu0key.github.io/tags/%E8%80%83%E7%A0%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>考研英语记录 3</title>
      <link>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-3/</link>
      <pubDate>Fri, 14 May 2021 18:59:39 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-3/</guid>
      <description>pushed adj. 处于窘境的；紧缺的；紧张的
can of fruit 水果罐头
across from 在&amp;hellip;对面
the craft of writing 写作技巧
day by day 一天天地
abracadabra n. 咒语
dog v. 尾随
I dare you&amp;hellip; 谅你不敢&amp;hellip;
How dare you&amp;hellip; 你竟然&amp;hellip;
stand on one&amp;rsquo;s head 倒立；尽某人最大的努力
hammer and tongs 竭尽全力地
Puma Ranch 美洲狮大牧场
sweet potato 红薯
sweet water 淡水；甜水
sweet dumpling 汤圆
sweet bean paste 豆沙
Yours 您诚挚的(用于信结尾)
any more 再；还
praise sb. for sth. 因 sth. 表扬 sb.</description>
    </item>
    
    <item>
      <title>考研英语记录 2</title>
      <link>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-2/</link>
      <pubDate>Fri, 14 May 2021 00:55:07 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-2/</guid>
      <description>class n. 阶级；类别；社会等级
class divisions/differences 阶级分歧/差异
door to door 挨家挨户
down adj. 沮丧的
a white elephant 无用的；无用的东西；沉重的负担
every other day 每隔一天
eyeable 可见的；赏心悦目的    中文 英文     界 kingdom   门 phylum   纲 class   目 order   科 family   属 genus   种 species    live v. 实况转播的
make sense 有道理；有意义
make up 弥补；组成；化妆；整理；编造/捏造</description>
    </item>
    
    <item>
      <title>考研英语记录 1</title>
      <link>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-1/</link>
      <pubDate>Wed, 12 May 2021 23:30:38 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%95-1/</guid>
      <description>每天背的前200个中出现的生词生义
would like 想要
would rather 宁可；宁愿
ask v. 要求
bread n. 生计
coat v. 覆盖
late adj. 已故的
lesson n. 教训
light v. 点燃 n. 领悟，启发 adj. 异动的
nurse v. 喂奶，照顾 n. 保姆
right v. 纠正
tell v. 辨别，判断
want n. 缺乏
wear n. 磨损
well n. 泉，油井，井
take v. 吃
degree n. 程度，学位
pant v. 喘气，喘息
pretty adv. 很，相当
lot n. 阉，签，土地，份额，命运
parking lot 停车场
schedule v. 安排</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 查找</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 01 Mar 2021 08:27:27 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9F%A5%E6%89%BE/</guid>
      <description>查找  查找  基本概念 顺序查找 折半查找 分块查找 B树 B树的插入和删除  插入 删除   B+树 散列查找  散列表(Hash Table) 开放定址法 平方探测法 伪随机序列法 再散列法      基本概念 查找：在数据集合中寻找满足某种条件的数据元素的过程称为查找
查找表(查找结构)：用于查找的数据集合称为查找表，它由同一类型的数据元素(或记录组成)
关键字：数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的(比如学号)
常见操作
 查找符合条件的数据元素 插入、删除某个数据元素  如果只进行操作1——静态查找表即可
也要进行操作2——动态查找表
评价指标
查找长度：在查找运算中，需要对比关键字的次数称为查找长度
平均查找长度(ASL)：所有查找过程中进行关键字的比较次数的平均值
$\displaystyle ASL=\sum_{i=1}^nP_iC_i$
其中n为数据元素个数，C_i为查找第i个元素的查找长度，P_i为查找第i个元素的概率
ASL的数量级放映了查找算法时间复杂度
评价一个查找算法的效率时，通常考虑查找成功/失败两种情况的ASL
顺序查找 顺序查找，又叫“线性查找”，通常用于线性表(顺序表、链表)
算法思想：从头到尾一个一个对比
顺序查找的实现
// 查找表的数据结构(顺序表) typedef struct { // 动态数组的基址(剩下靠偏移量)  Elemtypr *elem; // 表的长度  int TableLen; }SSTable; // 顺序查找 int Search_Seq(SSTable ST, ElemType key) { int i; // for循环空语句  for (i=0;i&amp;lt;ST.</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 图</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</link>
      <pubDate>Mon, 01 Mar 2021 08:22:55 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</guid>
      <description>图  图  定义 图的存储  临接矩阵 邻接表 十字链表法 邻接多重表   基本操作 图的遍历  广度优先遍历 深度优先遍历   最小生成树 最短路径问题 Dijkstra算法 Floyd算法 有向无环图(DAG) 拓扑排序 关键路径    定义 图G由顶点集V和边集E组成，记为G=(V, E)，其中V(G) 表示图G中顶点的有限非空集；E(G) 表示图G 中顶点之间的关系（边）集合。若 $V={v_1, v_2, &amp;hellip;, v_n}$，则用 $|V|$ 表示图G 中顶点的个数，也称图G 的阶，$E={(u, v)|u\in V, v\in V}$，用 $|E|$ 表示图G中边的条数。
G：Graph
V：Vertex
E：Edge
线性表可以是空表，树可以是空树，但图不可以是空的，即V一定是非空集
e.g.
V:车站，E：铁路
社交软件中的好友关系可以看成是一种无向图
微博中的粉丝关系可以看作是一种有向图
若 E 是无向边（简称边）的有限集合时，则图 G 为无向图。边是顶点的无序对，记为 $(v, w)$ 或 $(w, v)$，因为 $(v, w)=(w, v)$，其中v，w 是顶点。可以说顶点w和顶点v互为邻接点。边 $(v, w)$ 依附于顶点 $w$ 和 $v$，或者说边 $(v, w)$ 和顶点 v、w 相关联。</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 串</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%B2/</link>
      <pubDate>Sat, 06 Feb 2021 22:10:51 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%B2/</guid>
      <description>串  串  定义 存储结构  顺序存储 链式存储   基本操作  求子串 比较字符串 定位操作   朴素模式匹配算法 KMP 算法 KMP算法优化    定义 串，即字符串（String）是由零个或者多个字符组成的有限序列。一般记为 S = &amp;lsquo;a1a2&amp;hellip;a_n&amp;rsquo; ($n\geqslant0$)
其中，S是串名，单引号括起来的字符序列是串的值；$a_i$可以是字母、数字或者其他字符；串中字符的个数n称为串的长度。n=0 时的串称为空串（用 $\varnothing$ 表示）
字串：串中任意个连续的字符组成的子序列
主串：包含字串的串
字符在主串中的位置：字符在串中的序号
字串在主串中的位置：字串的第一个字符在主串中的位置
位序是从1开始，而不是0开始
串是一种特殊的线性表，数据元素之间呈线性关系
串的数据对象限定为字符集（如中文字符、英文字符、数字字符、标点字符等）
串的基本操作，如增删改查通常以字串为操作对象
串的基本操作
 StrAssign(&amp;amp;T, chars)：赋值操作，把串T赋值为chars StrCopy(&amp;amp;T, S)：复制操作。由串S复制得到串T StrEmpty(S)：判空操作。若S为空串，则返回true，否则返回false StrLength(S)：求串长，返回串S的元素个数 ClearString(&amp;amp;S)：清空操作。将S清为空串 DestroyString(&amp;amp;S)：销毁串。将串S销毁，回收存储空间 Concat(&amp;amp;T, S1, S2)：串联接。用T返回由S1和S2联接而成的新串 SubString(&amp;amp;sub, S, pos, len)：求字串，用sub但会串S的第pos个字符起长度为len的子串 Index(S, T)：定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0 StrCompare(S, T)：比较操作。若S&amp;gt;T，则返回值&amp;gt;0，若S=T，则返回值=0，若S&amp;lt; T，则返回值&amp;lt;0  这个比较是一个字符一个字符比较的，那字符怎么比较呢？
ASCII字符编码，将数字与字符一一对应，因此比较字符实际上就是比较字符对应的数字
乱码问题：
不同的编码规则可能会导致乱码</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 栈和队列</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 06 Feb 2021 22:08:19 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>栈和队列  栈和队列  定义 顺序栈  顺序栈-进栈 顺序表-出栈 顺序栈-读栈 顺序栈-共享栈 栈的链式实现   队列  队列-顺序存储 队列-入队 队列-出队 队列的链式实现 双端队列   栈-括号匹配 栈-表达式求值  原理 代码   栈的应用-递归 队列的应用 特殊矩阵的压缩存储  对称矩阵 三角矩阵 三对角矩阵 稀疏矩阵      定义 栈(stack) 是只允许一端进行插入或删除操作的线性表（是同一端）.
重要术语
 栈顶 栈底 空栈  特点：LIFO（Last In First Out）后进的先出
基本操作
 InitStack(&amp;amp; S)：初始化栈。构造一个空栈S，分配内存空间。 DestroyStack(&amp;amp; S)：销毁栈。销毁并释放栈S所占的内存空间。 Push(&amp;amp;S, x)：进栈，若栈S未满，则将x加入使之成为新栈顶。 Pop(&amp;amp;S, &amp;amp;x)：出栈，若栈S非空，则弹出栈顶元素，并用x返回 GetTop(S, &amp;amp;x)：读栈顶元素。若栈S非空，则用x返回栈顶元素  栈的差一般只访问栈顶元素   StackEmpty(S)：判断一个栈S是否为空，若为空，则返回true，否则返回false。  常考题型：判断合法的出栈的顺序（要满足先进后出，后进先出）</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 线性表</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Sat, 06 Feb 2021 21:43:51 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>线性表  线性表  定义 基本操作  其他常用操作 注 为什么需要实现基本操作   顺序表  顺序表的实现-静态分配 顺序表的实现-动态分配 特点 顺序表-插入 顺序表-删除 顺序表-按位查找 顺序表-按值查找 按值查找的时间复杂度   链表  定义 单链表-初始化 单链表-按位序插入 单链表-后插操作 单链表-前插操作 单链表-按位序删除 单链表-删除指定结点 单链表-按位查找 单链表-按值查找 单链表-获取长度 单链表-尾插法 单链表-头插法   双链表  初始化 双链表-插入 双链表-删除 双链表-遍历   循环链表  循环单链表 循环双链表   静态链表  静态链表-定义   顺序表和链表的比较    定义 线性表(Linear List)是具有相同数据类型的 n ($n\geqslant0$) 个数据元素的有限序列，其中 n 为表长，当 n=0 时线性表是一个空表。若用 L 命名线性表，则一般表示为 $$ L=(a_1, a_2,\cdots,a_j, a_{j+1},\cdots,a_n) $$ 相同：意味着每个数据元素所占空间一样大</description>
    </item>
    
    <item>
      <title>上交考研数分一题</title>
      <link>https://Lu0key.github.io/post/%E4%B8%8A%E4%BA%A4%E8%80%83%E7%A0%94%E6%95%B0%E5%88%86%E4%B8%80%E9%A2%98/</link>
      <pubDate>Fri, 22 Jan 2021 20:49:16 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E4%B8%8A%E4%BA%A4%E8%80%83%E7%A0%94%E6%95%B0%E5%88%86%E4%B8%80%E9%A2%98/</guid>
      <description>2021 上海交通大学硕士研究生入学考试数学分析第7题
求极限
$$ \lim_{x\to\infty}\dfrac{(1+\frac{1}{x})^x-e}{\sin\dfrac{1}{x}}
$$
Solution: $$\begin{aligned} &amp;amp;\lim_{x\to\infty}\dfrac{(1+\frac{1}{x})^x-e}{\sin\dfrac{1}{x}}\\
=&amp;amp;e\lim_{x\to\infty}\dfrac{e^{x\ln(1+\frac{1}{x})-1}-1}{\dfrac{1}{x}}\\
=&amp;amp;e\lim_{x\to\infty}x[x\ln(1+\dfrac{1}{x})-1]\\
=&amp;amp;e\lim_{x\to\infty}x[x(\dfrac{1}{x}-\dfrac{1}{2x^2}+o(\dfrac{1}{x^3}))-1]\\
=&amp;amp;-\dfrac{e}{2} \end{aligned}$$</description>
    </item>
    
    <item>
      <title>王道考研 数据结构 绪论</title>
      <link>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BB%AA%E8%AE%BA/</link>
      <pubDate>Fri, 22 Jan 2021 19:09:34 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BB%AA%E8%AE%BA/</guid>
      <description>绪论 学什么  如何用程序代码把现实世界的问题信息化 如何用计算机高效地处理这些信息从而创造价值  基本概念 数据  数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。
 数据元素、数据项  数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。
一个数据元素可由若干个数据项组成，数据项是构成数据元素的不可分割的最小单位。
 数据结构、数据对象  结构 是各个元素之间的关系
数据结构 是相互之间存在一种或者多种特定关系的数据元素的集合。
数据对象 是具有相同性质的数据元素的集合，是数据的一个子集。
 数据结构的三要素   逻辑结构
 集合  各个元素同属一个集合，别无其他关系   线性结构  数据元素之间是一对一的关系，除了第一个元素，所有元素都有唯一前驱，除了最后一个元素，所有元素都有唯一后继   树形结构  数据元素之间是一对多的关系   图状结构（网状结构）  数据元素之间是多对多的关系      物理结构（存储结构）
 顺序存储  存储位置相邻   链式存储  借助元素存储地址的指针来辨识元素之间的逻辑关系   索引存储  索引表，索引表中的每项称为索引项(关键字，地址)   散列存储  通过元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储      数据的运算</description>
    </item>
    
  </channel>
</rss>
