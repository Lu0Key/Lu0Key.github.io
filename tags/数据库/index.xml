<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 洛七的摸鱼池塘</title>
    <link>https://Lu0key.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 洛七的摸鱼池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Mar 2022 22:08:32 +0800</lastBuildDate><atom:link href="https://Lu0key.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库系统(4)-关系模型之关系代数</title>
      <link>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-4-%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/</link>
      <pubDate>Wed, 23 Mar 2022 22:08:32 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-4-%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/</guid>
      <description>关系代数的基本操作 关系代数的拓展操作 关系代数的组合与应用训练 关系代数的复杂拓展操作(选学)  关系代数概述 关系代数运算的特点  基于集合，提供了一系列的关系代数操作：并、差、笛卡尔积、选择、投影和更名等基本操作 以及交、链接和关系除等拓展操作，是一种集合思维的操作语言 关系代数操作以一个或多个关系为输入，结果是一个新的关系 用对关系的运算来表达查询，需要指明所用操作，具有一定的过程性 是一种抽象的语言，是学习其他数据库语言，如SQL等的基础  基本操作 关系代数之基本操作 关系代数运算的约束
并相容性
 参与运算的两个关系及其相关属性之间有一定的对应性、可比性或意义关联性  定义
关系R与关系S存在相容性，当且仅当：
 关系R和关系S的属性数目必须相容 对于任意 i ，关系R的第 i个属性的域必须和关系S的第i个属性的域相同  并
定义：假设关系R和关系S是并相容的，则关系R与关系S的并运算结果也是一个关系，记作：$R\cup S$，它由或者出现在关系R中，或者出现在关系S中的元组构成。
并运算是将两个关系的元组合并成一个关系，在合并时去掉重复的元组。
差
定义：假设关系 R 和关系 S 时并相容的，则关系 R 与关系S 的差运算结果也是一个关系，记作：R-S，它由踹向那子啊关系R中，但不出现在关系S中的元组构成。
数学描述：$R-S={t|t\in R ;and; t\not\in S}$，其中 t 是元组
广义笛卡尔积
定义：关系$R(&amp;lt;a_1,a_2,\cdots,a_n&amp;gt;)$ 与关系 $S(&amp;lt;b_1,b_2,\cdots,b_m&amp;gt;)$ 的广义笛卡尔积运算结果也是一个关系，记作：$R\times S$，它由关系R中的元组与关系S的元组进行所有可能的拼接(或串接)构成。
维数是相加
基数是相乘
选择
定义：给定一个关系R，同时给定一个选择的条件condition(简写con)，选择运算结果也是一个关系，记作$\sigma_{com}(R)$，它从关系R中选择除满足给定条件的condition的元组构成
运算优先级(从高到低)：括弧，比较运算符，非运算，与运算，或运算
投影(Project)
定义：给定一个关系R，投影运算结果也是以一个关系，记作 $\prod_A(R)$，它从关系R中选出属性包含在 A中的列构成.
投影关系，即从给定关系中选出某些列组成新的关系，而选择操作是从给定关系中选出某些行组成新的关系
例如$\prod_{A_3,A_1}(R)$，选取 $A_3,A_1$ 两列的元组,**投影后会自动去掉重复的元组**</description>
    </item>
    
    <item>
      <title>数据库系统(3)-关系模型之基本概念</title>
      <link>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-3-%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 23 Mar 2022 22:05:52 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-3-%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>关系模型概述？ 什么是关系？ 关系模型中的约束  关系模型简述 提出
E.F.Codd 在 1970 年提出
研究
一个关系(relation) 就是一个Table
关系模型就是处理Table 的，由三个部分组成：
 描述DB各种数据的基本结构形式(Table/Relation) 描述Table与Table之间所可能发生的各种操作(关系运算) 描述这些操作所应遵循的约束条件(完整性约束)  关系模型三要素
 基本结构：Relation/Table 基本操作：Relation/Table 基本的  并 Union 差 difference 广义积 product 选择 selection 投影 projection   拓展的：  交 intersection 连接 join 除 division    完整性约束：实体完整性、参照完整性和用户自定义的完整性
关系模型与关系数据库语言的关系
关系运算：关系代数和关系演算
关系演算：元组演算和域演算
基于关系代数设计的数据库语言(ISBL):用计算机可识别的符号表征关系代数的运算符号
基于元组演算设计的数据库语言(Ingres系统的QUEL)：用计算机可识别的符号表征元组演算的运算符号
基于域演算设计的数据库语言示例QBE
什么是关系 什么是表
表的基本构成要素
 表/关系 列/字段/属性/数据项 列名 列值 标题/模式 行/元组/记录  关系
“列”的取值范围“域(Domain)”</description>
    </item>
    
    <item>
      <title>数据库系统(2)-数据库系统的结构抽象与演变</title>
      <link>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-2-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1%E4%B8%8E%E6%BC%94%E5%8F%98/</link>
      <pubDate>Wed, 23 Mar 2022 22:02:00 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-2-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E6%8A%BD%E8%B1%A1%E4%B8%8E%E6%BC%94%E5%8F%98/</guid>
      <description>三级模式与两层映像 物理独立性和逻辑独立性 数据-&amp;gt; 模式 -&amp;gt; 数据模型 网状/层次模型 -&amp;gt; 关系模型 -&amp;gt; OO 数据模型  数据库系统的标准结构 DBMS 管理数据的三个层次
 External Level = User Level  某一用户能够看到与处理的数据，全局数据的一部分   Conceptual Level = Logic Level  从全局角度理解/管理的数据，含相应的关联约束   Internal Level = Physical Level  存储在介质上的数据，含存储路径、存储方式、索引方式等     模式(Schema)
对数据库中数据所进行的一种结构性的描述所观察到数据的结构信息
  视图(View)/数据(Data)
某一表现形式下表现出来的数据库中的数据
 模式：数据的结构
视图：展现的数据
模式是对数据的抽象
三级模式(三级视图) ExternalSchema &amp;mdash; (External) View
 某一用户能够看到与处理的数据的结构描述
 (Conceptual) Schema &amp;mdash; Conceptual View</description>
    </item>
    
    <item>
      <title>数据库系统(1)-初步认识数据库系统</title>
      <link>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-1-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 23 Mar 2022 09:04:07 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/22-3-23-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-1-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
      <description> 数据库 数据库语言（SQL） 数据库应用程序 关系数据库  面向对象数据库 XML数据库 NoSQL数据库 其他数据库 数据库设计 数据库应用程序开发 数据库存取与控制    初步认识数据库系统  数据库是电子化信息的集合  Table
 列/字段/属性/数据项 行/元组/记录  Table 中描述了一批相互有关联关系的数据
Database 相互之间有关联关系的 Table 的集合
数据库系统(工作环境)
 数据库(DB)：Database 数据库管理系统(DBMS)：Database Management System(一种软件：Oracle、SQL Server) 数据库应用(DBAP)：Database Application 数据库管理员(DBA)：Database Administrator 计算机基本系统  数据库管理系统的功能：
 数据库定义  DDL：数据定义语言   数据库操纵  DML：数据操纵语言   数据库控制  DCL：数据控制语言   数据库维护  转储、恢复、重组、性能检测、分析    SQL：结构化的数据库语言
 DDL DML DCL  </description>
    </item>
    
    <item>
      <title>数据库复试极限学习</title>
      <link>https://Lu0key.github.io/post/22-3-18-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E8%AF%95%E6%9E%81%E9%99%90%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 18 Mar 2022 15:42:13 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/22-3-18-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E8%AF%95%E6%9E%81%E9%99%90%E5%AD%A6%E4%B9%A0/</guid>
      <description>因为是突然自学，所以就可能顺序会比较 随意 乱.
绪论 四个基本概念
 数据：描述事物的符号记录 数据库：概括地讲，数据库具有永久存储、有组织和可共享的三个基本特点  数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型组织、描述和存储，具有较小的冗余度、较高的数据独立性和易拓展性，并可为各种用户共享。   数据库管理系统：是位于用户和操作系统之间的一层数据管理软件，和操作系统一样是计算机的基础软件  主要功能： 数据定义功能 数据组织、存储和管理 数据操纵功能 数据库的事务管理和运行管理 数据库的建立和维护功能 其他功能(数据转换功能，互访和互操作功能)   数据库系统：是由数据库、数据库管理系统(及其应用开发工具)、应用程序和数据库管理员(DBA)组成的存储、管理、处理和维护数据的系统。  注意：数据库系统是最大的范围
数据库的发展阶段
 人工管理阶段：数据不保存、不共享、不具有独立性 文件系统阶段：可保存，但共享性差，冗余度大，独立性差 数据库管理系统：数据库系统的出现使信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心的新阶段  实现整体数据的结构化
数据的共享性高、冗余度低：数据共享可以大大减少数据冗余，节约存储空间
数据独立性高：
物理独立性：是指用户的应用程序与数据库中数据的物理存储是相互独立的
逻辑独立性：是指用户的应用程序与数据库的逻辑逻辑是相互独立的
数据由数据库管理系统统一管理和控制
数据模型
 概念模型：也称信息模型，他是按用户观点来对数据和信息建模，用于数据库设计  基本概念
实体：客观存在并可相互区别的事物：人
属性：实体所具有的某一特性：人的鼻子、嘴巴
码：唯一标识实体的属性：学号
实体型：用实体名及其属性集合来抽象和刻画同类实体：类
实体集：同一类型实体的集合：学号
联系：实体之间的联系通常是指不同实体集之间的联系，实体之间的联系有一对一，一对多，多对多等
概念模型的一种表示方法：实体-联系方法，用E-R图来描述现实世界的概念模型，E-R方法也称为E-R模型。
逻辑模型：它是按计算机系统的观点对数据建模，主要用于数据库管理系统的实现，包括：
 层次模型 网状模型 关系模型  物理模型：是对数据最底层的抽象，他描述数据在系统内部的表示方法和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的
联系：实体内部之间的联系通常是指实体各属性之间的联系
常用的数据模型
 层次模型 网状模型 关系模型 面向对象数据模型 对象关系数据模型 半结构化数据模型  关系：一个关系对应通常说的一张表
元组：表中的一行
属性：表中的一列</description>
    </item>
    
  </channel>
</rss>
