<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 洛七的摸鱼池塘</title>
    <link>https://Lu0key.github.io/tags/java/</link>
    <description>Recent content in Java on 洛七的摸鱼池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Mar 2024 22:07:15 +0800</lastBuildDate><atom:link href="https://Lu0key.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java IO 基础</title>
      <link>https://Lu0key.github.io/post/basic-java-io/</link>
      <pubDate>Sat, 02 Mar 2024 22:07:15 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/basic-java-io/</guid>
      <description>文件 文件就是保存数据的地方。
 流: 数据在数据源(文件)和程序(内存)之间经历的路径 输入流：数据从数据源(文件)到程序(内存)的路径 输出流: 数据从程序(内存)到数据源(文件)的路径  常用的文件操作  new File(String pathname): 根据路径构建一个 File 对象 new File(File parent, String child): 根据父目录文件+子路径构建 new File(String parent, String child): 根据父目录+子路径构建  import org.junit.Test; import java.io.File; import java.io.IOException; // 演示创建文件 public class FileCreate { public static void main(String[] args) { } // 方式1  @Test public void create01() { String filePath = &amp;#34;f:\\news1.txt&amp;#34;; File file = new File(filePath); try { // 执行了这个方法才会在磁盘创建  file.</description>
    </item>
    
    <item>
      <title>JSP项目部署</title>
      <link>https://Lu0key.github.io/post/jsp%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 12 Jan 2023 16:28:22 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/jsp%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</guid>
      <description>在写了那么久的JavaWeb项目后，当然是把自己做的项目给别人炫耀一下呀，这时候就要把自己的内容发布到网络上。
常用的有两种方法，一种是以自己电脑为服务器，用花生壳、ngrok等一些内网穿透工具，让别人可以用浏览器访问，这种方法有一个弊端就是，你的电脑必须要实时联网，一直开机，对于笔记本来说有一些不方便；另一种方法就是搞一台云服务器，比如：阿里云，腾讯云，山大云(逃)，然后将自己的项目部署到云服务器上，这样的话就能解决上述弊端。
前提：一台服务器，服务器安装了JDK，安装了tomcat，开放了8080端口，教程基于IDEA
接下来开始教程：
 点击 File -&amp;gt; Project Structure(快捷键Ctrl+Shift+Alt+S) 点击左侧的 Project Setting -&amp;gt; Artifacts 点击中间的 + 选择 Web Application: Archive 中你的项目 点击右下角的 Apply 点击 OK 点击 Build -&amp;gt; Build Artifacts, 选择 All Artifacts -&amp;gt; Clean 点击 Build -&amp;gt; Rebuild Project, 点击 Build -&amp;gt; Build Artifacts, 选择 ${项目名}:Web -&amp;gt; Build 在左侧项目结构中找到 out -&amp;gt; artifacts -&amp;gt; ${项目名}_Web -&amp;gt; ${项目名}_Web.war 右键选择 Show in Explorer 将这个 war 包放到服务器 tomcat 目录的 webapps 下  # 假设现在在 webapps 目录下 cd .</description>
    </item>
    
    <item>
      <title>HashMap源码学习</title>
      <link>https://Lu0key.github.io/post/hashmap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 13 Jun 2021 23:21:49 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/hashmap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
      <description>HashMap 因为为了翻转课堂专门看了 HashMap 的源码，为了担心以后忘记，写一篇笔记记录下来，如果下面没有特指都是指 JDK 1.8 的源码，JDK 1.7 与 1.8 差别比较大
介绍 HashMap 的底层是 数组 + 链表 + 红黑树，用一张图就能表示的比较清楚
这张图有一个问题，不止要链表长度达到 8，还要数组长度达到 64
常量 // 版本 id，感觉一般没用 private static final long serialVersionUID = 362498820763181265L; // 默认初始化容量，为 16 // 之所以用 1 &amp;lt;&amp;lt; 4 应该是为了表示容量必须是 2 的幂次方 static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16  // 最大容量为 2^30 // 最小为 2 static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 默认负载因子为 0.</description>
    </item>
    
    <item>
      <title>Java 实现简易图片查看器</title>
      <link>https://Lu0key.github.io/post/imageviewer-code/</link>
      <pubDate>Sun, 18 Apr 2021 16:59:54 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/imageviewer-code/</guid>
      <description>这个代码是直接用核心卷上的
import javax.swing.*; import java.awt.*; import java.io.File; public class ImageViewer { public static void main(String[] args) { EventQueue.invokeLater(()-&amp;gt;{ JFrame frame = new ImageViewerFrame(); frame.setTitle(&amp;#34;ImageViewer&amp;#34;); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); }); } } class ImageViewerFrame extends JFrame{ private JLabel label; private JFileChooser chooser; private static final int DEFAULT_WIDTH = 300; private static final int DEFAULT_HEIGHT = 400; public ImageViewerFrame(){ setSize(DEFAULT_WIDTH,DEFAULT_HEIGHT); // use a label to display the images  label = new JLabel(); add(label); // set up the file chooser  chooser = new JFileChooser(); chooser.</description>
    </item>
    
  </channel>
</rss>
