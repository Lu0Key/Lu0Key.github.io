<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>selenium on 洛七的摸鱼池塘</title>
    <link>https://Lu0key.github.io/tags/selenium/</link>
    <description>Recent content in selenium on 洛七的摸鱼池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Jan 2023 23:24:14 +0800</lastBuildDate><atom:link href="https://Lu0key.github.io/tags/selenium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>纪念健康打卡</title>
      <link>https://Lu0key.github.io/post/%E7%BA%AA%E5%BF%B5%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/</link>
      <pubDate>Sat, 07 Jan 2023 23:24:14 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E7%BA%AA%E5%BF%B5%E5%81%A5%E5%BA%B7%E6%89%93%E5%8D%A1/</guid>
      <description>疫情管控放开了，学校也终于取消健康打卡了，之前写的自动化健康打卡也用不到了，记录一下这个健康打卡引用中遇到的两个新问题
这里的代码是用selenium实现的，因为懒，不想再分析请求了
第一个问题：如何发送邮件
from email.mime.text import MIMEText #纯文本，HTML from email.mime.image import MIMEImage #图片 from email.mime.multipart import MIMEMultipart #多种组合内容 # smtplib 用于邮件的发信动作 import smtplib # email 用于构建邮件内容 from email.mime.text import MIMEText # 构建邮件头 from email.header import Header def sendMail(status): # 发信方的信息：发信邮箱，QQ 邮箱授权码 # 发送方邮箱 from_addr = &amp;#39;xxxxx@qq.com&amp;#39; # 发送方的QQ邮箱授权码 password = &amp;#39;asdfghjkl&amp;#39; # 收信方邮箱 to_addr = &amp;#39;yyyyyy@qq.com&amp;#39; # 发信服务器 # QQ那边设置 smtp_server = &amp;#39;smtp.qq.com&amp;#39; # 邮箱正文内容，第一个参数为内容，第二个参数为格式(plain 为纯文本)，第三个参数为编码 msg = MIMEText(&amp;#39;恭喜你今天的打卡完成啦！&amp;#39;, &amp;#39;plain&amp;#39;, &amp;#39;utf-8&amp;#39;) # 邮件头信息 msg[&amp;#39;From&amp;#39;] = Header(&amp;#39;打卡小助手&amp;#39;) # 发送者 msg[&amp;#39;To&amp;#39;] = Header(&amp;#39;洛七&amp;#39;) # 接收者 subject = &amp;#39;【健康打卡】&amp;#39;+status msg[&amp;#39;Subject&amp;#39;] = Header(subject, &amp;#39;utf-8&amp;#39;) # 邮件主题 try: smtpobj = smtplib.</description>
    </item>
    
    <item>
      <title>Python Selenium 笔记</title>
      <link>https://Lu0key.github.io/post/python-selenium/</link>
      <pubDate>Sun, 28 Feb 2021 19:30:33 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/python-selenium/</guid>
      <description>Python Selenium 笔记 这里用的是Firefox的 webdriver
browser = webdriver.Firefox(executable_path =r&amp;#34;D:\geckodriver&amp;#34;) 通过get打开网页
browser.get(&amp;#34;https://www.baidu.com&amp;#34;) 窗口最大化
browser.maximize_window() 输入内容
browser.find_element_by_id(&amp;#34;un&amp;#34;).send_keys(&amp;#34;学号&amp;#34;) 点击事件
browser.find_element_by_id(&amp;#34;index_login_btn&amp;#34;).click() close 和 quit 的区别
# close 是关闭当前tab browser.close() # quit 是关闭整个浏览器 browser.quit() 在自动化操作的时候可能会遇到多个标签页，这里我还不是很清楚，一个标签页对应一个句柄
# 获得所有句柄 handles = browser.window_handles # 获得当前句柄 currentWin = browser.current_window_handle 因为我在使用的时候，最多只会遇到两个标签页，多的标签页可以直接close掉，因此没有深究怎么切换到指定的标签页的方法，只要每次产生新的标签页的时候，我就把当前的标签页关掉，然后获得新标签页的句柄(因为只有一个标签页，因此句柄也只有一个)
# 假装这里打开了新的标签页 # 关闭当前标签页 browser.close() # 获得所有句柄(这时只有1个) handles = browser.window_handles # 切换到这个句柄上 browser.switch_to.window(handles[0]) 当页面中有iframe标签的时候，选择器无法选择到iframe中的内容，因此要切换到iframe内
# 这里只要获得了对应的iframe标签即可，比如用id也可以 iframe = browser.find_elements_by_tag_name(&amp;#34;iframe&amp;#34;)[0] # 切换到iframe中就可以用css选择器之类的去获取元素 browser.switch_to.frame(iframe) # 对iframe中的内容操作完了，返回原页面 browser.switch_to.default_content() </description>
    </item>
    
  </channel>
</rss>
