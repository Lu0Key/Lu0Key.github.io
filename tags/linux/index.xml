<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 洛七的摸鱼池塘</title>
    <link>https://Lu0key.github.io/tags/linux/</link>
    <description>Recent content in Linux on 洛七的摸鱼池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Mar 2024 15:53:03 +0800</lastBuildDate><atom:link href="https://Lu0key.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis 离线安装</title>
      <link>https://Lu0key.github.io/post/redis-offline-installation/</link>
      <pubDate>Fri, 01 Mar 2024 15:53:03 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/redis-offline-installation/</guid>
      <description>下载 需要以下内容
 redis make build-essential pkg-config libdpkg-perl  安装 tar -zxvf redis-7.2.2.tar.gz cd redis-7.2.2 make test &amp;amp;&amp;amp; make # Command &amp;#39;make&amp;#39; not found, but can be installed with: # sudo apt install make # version 4.3-4.1build1, or # sudo apt install make-guile # version 4.3-4.1build1 # 因此需要为离线环境安装 make sudo apt-get download make # 这里能下下来 make 所需的 deb 包, 到时候迁移到离线环境 sudo dpkg -i make_4.3-4.1build1_amd64.deb # 然后再回到 redis 进行测试 sudo make test &amp;amp;&amp;amp; make # /bin/sh: 1: cc: not found # make[1]: *** [Makefile:436: adlist.</description>
    </item>
    
    <item>
      <title>检测服务器状态</title>
      <link>https://Lu0key.github.io/post/detect-server-status/</link>
      <pubDate>Wed, 28 Feb 2024 17:14:54 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/detect-server-status/</guid>
      <description>检测服务器状态脚本
主打一个抽象, 代码如下:
from flask import Flask, request, redirect, url_for, session, render_template import psutil import subprocess app = Flask(__name__) app.secret_key = &amp;#39;keyyyyy&amp;#39; # 设置一个随机的密钥来加密 session 数据 def get_cpu_usage(): # 显示cpu型号 return &amp;#39;{}%&amp;#39;.format(psutil.cpu_percent(interval=1)) def bytes_to_gb(bytes): return bytes / (1024 ** 3) def get_mem_usage(): return &amp;#39;{:.2f}/{} GB({}%)&amp;#39;.format(bytes_to_gb(psutil.virtual_memory().used), int(bytes_to_gb(psutil.virtual_memory().total)), psutil.virtual_memory().percent) def get_gpu_info(): try: result = subprocess.run([&amp;#39;nvidia-smi&amp;#39;, &amp;#39;--query-gpu=index,name,memory.total,memory.used,memory.free,utilization.gpu,utilization.memory&amp;#39;, &amp;#39;--format=csv,noheader,nounits&amp;#39;], capture_output=True, text=True).stdout.strip() except Exception as e: if &amp;#34;No such file or directory: &amp;#39;nvidia-smi&amp;#39;&amp;#34; in str(e): return {&amp;#39;id&amp;#39;:[&amp;#39;无显卡&amp;#39;], &amp;#39;gpu_mem_usage&amp;#39;: [], &amp;#39;gpu_utilization&amp;#39;: []} else: print(e) return {&amp;#39;id&amp;#39;:[&amp;#39;未知显卡错误&amp;#39;], &amp;#39;gpu_mem_usage&amp;#39;: [], &amp;#39;gpu_utilization&amp;#39;: []} # print(result) if &amp;#34;NVIDIA-SMI has failed &amp;#34; in result: return {&amp;#39;id&amp;#39;:[&amp;#39;显卡驱动异常&amp;#39;], &amp;#39;gpu_mem_usage&amp;#39;: [&amp;#39;N/A&amp;#39;], &amp;#39;gpu_utilization&amp;#39;: [&amp;#39;N/A&amp;#39;]} elif &amp;#34;Unable to determine the device handle&amp;#34; in result: return {&amp;#39;id&amp;#39;:[&amp;#39;显卡状态异常&amp;#39;], &amp;#39;gpu_mem_usage&amp;#39;: [&amp;#39;N/A&amp;#39;], &amp;#39;gpu_utilization&amp;#39;: [&amp;#39;N/A&amp;#39;]} else: gpu_info = result.</description>
    </item>
    
    <item>
      <title>Linux Nvidia 显卡掉驱动</title>
      <link>https://Lu0key.github.io/post/linux-nvidia-driver-failed/</link>
      <pubDate>Wed, 28 Feb 2024 16:45:30 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-nvidia-driver-failed/</guid>
      <description>环境: Ubuntu 22.04
很恶心的一个问题, 经常掉驱动
# 看到这个就恶心 nvidia-smi # NVIDIA-SMI has failed because it couldn&amp;#39;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running. 目前可能的一个原因是服务器重启之后自动更新了内核版本, 导致驱动与内核版本不匹配, 很抽象
这里主要记录禁止内核自动升级, 和已经升级了的解决尝试
禁止内核自动升级 # 关闭内核自动升级 sudo apt-mark hold linux-image-generic linux-headers-generic # 以后如果要恢复 # sudo apt-mark unhold linux-image-generic linux-headers-generic # 先看看现在的 Linux 内核版本 uname -r # 6.5.0-18-generic 尝试解决 原来都是直接下新的驱动就OK了, 这次安装新的驱动不行可能是因为要求的 gcc 版本更高了, 但是电脑里没有新版的 gcc
看了别人很多解决方案, 这里还是选择不重启的方法
两种选择:</description>
    </item>
    
    <item>
      <title>Ubuntu 开机自启</title>
      <link>https://Lu0key.github.io/post/ubuntu-start-automatically-at-boot/</link>
      <pubDate>Wed, 28 Feb 2024 16:10:46 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/ubuntu-start-automatically-at-boot/</guid>
      <description>因为有些服务需要开机自启, 因此记录一下
环境: Ubuntu 22.04
方法一 这是最后成功的方法
先写好 shell 脚本, 然后在 /etc/profile 文件里面最后一行加上 bash xxx.sh 即可
目前还没实验 xxx.sh 需要什么样的权限才能用, 目前给的是 775, 今天事情处理完再多做几个实验
还要实验一下 shell 脚本的 开头是不是一定要 #!/bin/bash
方法二 这个是网上推荐的方法, 但是我没有成功, 不知道问题在哪里
[Unit] Description=Your Service Description After=network.target [Service] Type=simple ExecStart=/path/to/your/script.sh Restart=on-failure RestartSec=3s [Install] WantedBy=multi-user.target 这里 restart 只在异常退出的时候使用, 因为这个脚本只是启动服务的, 服务启动结束就完了, 不需要这个脚本一直执行.
然后保存文件并执行
sudo systemctl daemon-reload sudo systemctl restart your-service-name.service sudo systemctl status your-service-name 这里看 status 时发现, 都可以执行, 除了用 nohup python xxx 一直有问题不知道为什么, 就是执行不了, 前面后面的都能执行, 之后看看去掉 nohup 能不能执行, 不知道会不会与这个相关.</description>
    </item>
    
    <item>
      <title>Ubuntu docker 安装</title>
      <link>https://Lu0key.github.io/post/ubuntu_docker_%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 23 Jan 2024 21:57:17 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/ubuntu_docker_%E5%AE%89%E8%A3%85/</guid>
      <description>实验室最近技术调研需要用到 Docker , 因此这里记录一下安装 docker 的流程
内容全部来源于docker 从入门到实践
安装 # 卸载旧版本 sudo apt-get remove docker docker-engine docker.io # 使用 APT 安装 sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release 添加软件源的 GPG 密钥
# 为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。 # 这里使用国内源 curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # 官方源 # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 添加 docker 软件源
# 向 sources.list 中添加 Docker 软件源 echo &amp;#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.</description>
    </item>
    
    <item>
      <title>服务器ssh配置</title>
      <link>https://Lu0key.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 23 Jan 2024 21:32:58 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%85%8D%E7%BD%AE/</guid>
      <description>因为所在网络环境老安全了, 因此为了方便访问, 记一下几个常用的设置。
先查看有没有安装 openssh-server(因为这里我用的是Ubuntu, CentOs可能是别的)
# 在安装了的里面找 apt list --installed | grep openssh-server 例如装了的就是
openssh-server/jammy-updates,jammy-security,now 1:8.9p1-3ubuntu0.6 amd64 [已安装] 如果没装就装一下
sudo apt-get update sudo apt-get install openssh-server 修改文件
sudo vim /etc/ssh/sshd_config # 把原本 PermitRootLogin prohitbit-password # 改成 PermitRootLogin yes # 感觉下面这个重启也不是必须的 systemctl restart sshd 改了这些其他都可以通过ssh远程改了.</description>
    </item>
    
    <item>
      <title>Linux 更新显卡驱动</title>
      <link>https://Lu0key.github.io/post/linux-%E6%9B%B4%E6%96%B0%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Mon, 31 Jul 2023 23:31:10 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-%E6%9B%B4%E6%96%B0%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid>
      <description>最近经常更新老机器上的显卡驱动, 记录一下.
 更新显卡驱动 更新CUDA 更新 Cudnn  更新显卡驱动 先去官网下载最新的显卡驱动, 放到服务器上, 然后执行
sudo chmod u+x ./NNVIDIA-Linux-x86_64-535.86.05.run sudo ./NVIDIA-Linux-x86_64-535.86.05.run 然后一路安装即可, 可能会遇到 X Server 没关闭的错误, 那就执行下面的命令即可.(我是Ubuntu)
sudo service lightdm stop # or sudo systemctl stop gdm 然后重新执行即可.
如果遇到提示
ERROR: The Nouveau kernel driver is currently in use by your system. 那么执行下面命令
sudo vim /etc/default/grub # 然后修改成下面这样 # GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet splash nouveau.modeset=0&amp;#34; # 修改完后保存退出, 更新 sudo update-grub # 重启 sudo reboot ERROR: Unable to find the development tool `cc` in your path; please make sure that you have the package &#39;gcc&#39; installed.</description>
    </item>
    
    <item>
      <title>Linux 新增硬盘</title>
      <link>https://Lu0key.github.io/post/linux-%E6%96%B0%E5%A2%9E%E7%A1%AC%E7%9B%98/</link>
      <pubDate>Mon, 31 Jul 2023 15:03:39 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-%E6%96%B0%E5%A2%9E%E7%A1%AC%E7%9B%98/</guid>
      <description>我们有时候Linux 服务器只有一个硬盘, 但是不是 LVM 格式的, 没办法直接扩容, 又不够用了, 因此我们选择 新创建一个 /home2 文件夹, 然后把硬盘挂载到 /home2 上, 想要方便直接用的话, 我就直接在 /home2 下给每一个人新创建一个同样的文件夹
# 需要管理员来搞 # 比如这个用户叫xxx sudo mkdir /home2/xxx sudo chmod 755 /home2/xxx sudo chown xxx:xxx /home2/xxx 然后 xxx 就可以在这个新的文件夹里直接用了.</description>
    </item>
    
    <item>
      <title>Linux 文本文件忙</title>
      <link>https://Lu0key.github.io/post/linux-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%BF%99/</link>
      <pubDate>Mon, 31 Jul 2023 13:16:20 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%BF%99/</guid>
      <description>使用 MobaXterm 远程连接服务器的时候, 有时候会手动创建脚本在 windows 上写好了, 然后再直接用 MobaXterm 打开文件复制进去, 然后修改 shell 脚本的权限后去运行脚本. 有时候会出现错误
-bash: ./xxx.sh: 文本文件忙 这是因为 windows 和 Linux 的换行符不一样导致的, 解决方法是使用 dos2unix 命令
dos2unix xxx.sh 然后重新运行即可.</description>
    </item>
    
    <item>
      <title>Linux gpu fan control</title>
      <link>https://Lu0key.github.io/post/linux-gpu-fan-control/</link>
      <pubDate>Wed, 26 Jul 2023 00:58:32 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-gpu-fan-control/</guid>
      <description>用于 Linux 服务器风扇控制, 经常觉得服务器显卡的风扇调度太保守了, 没事就想摸摸看, 然后核心温度才50度, 摸上去都有70多度了, 因此想要自己控制显卡的风扇转速, 狠狠地转！ 有时候核心都快70度了, 风扇转速才70%。
#!/bin/bash  gpu_index_str=$(nvidia-smi --query-gpu=index --format=csv,noheader) gpu_index=($gpu_index_str) for index in ${!gpu_index[*]} do nvidia-settings -a &amp;#34;[gpu:$index]/GPUFanControlState=1&amp;#34; done old_speed=-1 # fan_nums nvidia-settings -q all | grep fan last_fan_index=$( nvidia-settings -q all | grep fan | grep -oP &amp;#34;\[fan:(\d+)\]:&amp;#34; | grep -oP &amp;#34;\d+&amp;#34; | sort -rn | head -n 1) echo $last_fan_index fan_nums=$((last_fan_index+1)) echo &amp;#34;fan count&amp;#34; echo $fan_nums while true do temperature_str=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader) temperature=($temperature_str) if [ $((temperature[0])) -lt 40 ]; then echo &amp;#34;temperature &amp;lt; 40&amp;#34; fan_speed=60 elif [ $((temperature[0])) -lt 60 ]; then echo &amp;#34;40 &amp;lt; temperature &amp;lt; 60&amp;#34; fan_speed=90 else echo &amp;#34;temperature &amp;gt; 60&amp;#34; fan_speed=100 fi if [ $((old_speed)) -ne $((fan_speed)) ]; then for ((index=0;index&amp;lt;fan_nums;index++)) do old_speed=$fan_speed # echo &amp;#34;fan speed flush to $fan_speed&amp;#34; nvidia-settings -a &amp;#34;[fan:$((index))]/GPUTargetFanSpeed=$((fan_speed))&amp;#34; # echo &amp;#39;nvidia-settings -c:$index -a &amp;#34;[fan:$((index))]/GPUTargetFanSpeed=$((fan_speed))&amp;#34;&amp;#39; done fi sleep 300 done 缺陷:</description>
    </item>
    
    <item>
      <title>Linux 创建新用户</title>
      <link>https://Lu0key.github.io/post/linux-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%94%A8%E6%88%B7/</link>
      <pubDate>Fri, 21 Jul 2023 18:27:05 +0800</pubDate>
      
      <guid>https://Lu0key.github.io/post/linux-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%94%A8%E6%88%B7/</guid>
      <description>sudo adduser xxx # 指定主目录 # 例如 # sudo adduser xxx --home /new_home/xxx # 输入密码 sudo chmod 755 /home/xxx su xxx # 输入密码 ssh-keygen # 一路回车 cd ~/.ssh cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys chmod 777 ~/.ssh chmod 777 ~/.ssh/id_rsa # 然后把 id_rsa 下载下来 chmod 600 ~/.ssh/id_rsa chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys 然后就可以根据 id_rsa 登录了.</description>
    </item>
    
  </channel>
</rss>
